{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 A Python package for interacting with cTrader FIX API. This package is developed and maintained by Spotware. You can use cTraderFix on all kinds of Python apps, it uses Twisted to send and receive messages asynchronously. Github Repository: https://github.com/spotware/cTraderFixPy Installation \u00b6 You can install cTraderFix from pip: pip install ctrader-fix Usage \u00b6 from twisted.internet import reactor from inputimeout import inputimeout , TimeoutOccurred import json from ctrader_fix import * # Callback for receiving all messages def onMessageReceived ( client , responseMessage ): print ( \"Received: \" , responseMessage . getMessage () . replace ( \"\ufffd\" , \"|\" )) messageType = responseMessage . getFieldValue ( 35 ) if messageType == \"A\" : print ( \"We are logged in\" ) # Callback for client disconnection def disconnected ( client , reason ): print ( \"Disconnected, reason: \" , reason ) # Callback for client connection def connected ( client ): print ( \"Connected\" ) logonRequest = LogonRequest ( config ) send ( logonRequest ) # you can use two separate config files for QUOTE and TRADE with open ( \"config-trade.json\" ) as configFile : config = json . load ( configFile ) client = Client ( config [ \"Host\" ], config [ \"Port\" ], ssl = config [ \"SSL\" ]) # Setting client callbacks client . setConnectedCallback ( connected ) client . setDisconnectedCallback ( disconnected ) client . setMessageReceivedCallback ( onMessageReceived ) # Starting the client service client . startService () reactor . run ()","title":"Getting Started"},{"location":"#introduction","text":"A Python package for interacting with cTrader FIX API. This package is developed and maintained by Spotware. You can use cTraderFix on all kinds of Python apps, it uses Twisted to send and receive messages asynchronously. Github Repository: https://github.com/spotware/cTraderFixPy","title":"Introduction"},{"location":"#installation","text":"You can install cTraderFix from pip: pip install ctrader-fix","title":"Installation"},{"location":"#usage","text":"from twisted.internet import reactor from inputimeout import inputimeout , TimeoutOccurred import json from ctrader_fix import * # Callback for receiving all messages def onMessageReceived ( client , responseMessage ): print ( \"Received: \" , responseMessage . getMessage () . replace ( \"\ufffd\" , \"|\" )) messageType = responseMessage . getFieldValue ( 35 ) if messageType == \"A\" : print ( \"We are logged in\" ) # Callback for client disconnection def disconnected ( client , reason ): print ( \"Disconnected, reason: \" , reason ) # Callback for client connection def connected ( client ): print ( \"Connected\" ) logonRequest = LogonRequest ( config ) send ( logonRequest ) # you can use two separate config files for QUOTE and TRADE with open ( \"config-trade.json\" ) as configFile : config = json . load ( configFile ) client = Client ( config [ \"Host\" ], config [ \"Port\" ], ssl = config [ \"SSL\" ]) # Setting client callbacks client . setConnectedCallback ( connected ) client . setDisconnectedCallback ( disconnected ) client . setMessageReceivedCallback ( onMessageReceived ) # Starting the client service client . startService () reactor . run ()","title":"Usage"},{"location":"client/","text":"Client Class \u00b6 You will use an instance of this class to interact with API. Each instance of this class will have one connection to API, either QUOTE or TRADE. The client class is driven from Twisted ClientService class, and it abstracts away all the connection / reconnection complexities from you. Creating a Client \u00b6 Let's create an isntance of Client class: from ctrader_fix import * client = Client ( config [ \"Host\" ], config [ \"Port\" ], ssl = config [ \"SSL\" ]) It's constructor has several parameters that you can use for controling it behavior: host: The API host endpoint, you can get it from your cTrader FIX settings port: The API host port number, you can get it from your cTrader FIX settings ssl: It't bool flag, if Yes client will use SSL for connection otherwise it will use plain TCP connection The SSL connection is not working for now There are three other optional parameters which are from Twisted client service, you can find their detail here: https://twistedmatrix.com/documents/current/api/twisted.application.internet.ClientService.html Callbacks \u00b6 To use your client you have to set it's call backs: ConnectedCallback(client): This callback will be called when client gets connected, use client setConnectedCallback method to assign a callback for it DisconnectedCallback(client, reason): This callback will be called when client gets disconnected, use client setDisconnectedCallback method to assign a callback for it MessageReceivedCallback(client, message): This callback will be called when a message is received, it's called for all message types, use setMessageReceivedCallback to assign a callback for it Use the connected call back to send a logon message. And after logon use your message received call back to continue your interaction with API.","title":"Client"},{"location":"client/#client-class","text":"You will use an instance of this class to interact with API. Each instance of this class will have one connection to API, either QUOTE or TRADE. The client class is driven from Twisted ClientService class, and it abstracts away all the connection / reconnection complexities from you.","title":"Client Class"},{"location":"client/#creating-a-client","text":"Let's create an isntance of Client class: from ctrader_fix import * client = Client ( config [ \"Host\" ], config [ \"Port\" ], ssl = config [ \"SSL\" ]) It's constructor has several parameters that you can use for controling it behavior: host: The API host endpoint, you can get it from your cTrader FIX settings port: The API host port number, you can get it from your cTrader FIX settings ssl: It't bool flag, if Yes client will use SSL for connection otherwise it will use plain TCP connection The SSL connection is not working for now There are three other optional parameters which are from Twisted client service, you can find their detail here: https://twistedmatrix.com/documents/current/api/twisted.application.internet.ClientService.html","title":"Creating a Client"},{"location":"client/#callbacks","text":"To use your client you have to set it's call backs: ConnectedCallback(client): This callback will be called when client gets connected, use client setConnectedCallback method to assign a callback for it DisconnectedCallback(client, reason): This callback will be called when client gets disconnected, use client setDisconnectedCallback method to assign a callback for it MessageReceivedCallback(client, message): This callback will be called when a message is received, it's called for all message types, use setMessageReceivedCallback to assign a callback for it Use the connected call back to send a logon message. And after logon use your message received call back to continue your interaction with API.","title":"Callbacks"},{"location":"config/","text":"Config \u00b6 When you create a request message you have to pass a config, this config should be a dictionary like object with these keys: Host: The FIX host that will be used for client connection Port: The port number of host SSL: true/false, this can be used by client if SSL connected is required Username: Your cTrader trading account number Password: Your cTrader trading account password BeginString: Message begin string (FIX.4.4) SenderCompID: Your cTrader FIX SenderCompID SenderSubID: Your cTrader FIX SenderSubID (QUOTE/TRADE) TargetCompID: Your cTrader FIX TargetCompID (cServer), TargetSubID: Your cTrader FIX TargetSubID (QUOTE), HeartBeat: The heartbeat seconds (30) You can get the values for most of them from your cTrader FIX settings. You can use a JSON file to save your configuration, check our samples. JSON Sample \u00b6 { \"Host\" : \"h51.p.ctrader.com\" , \"Port\" : 5201 , \"SSL\" : false , \"Username\" : \"3279204\" , \"Password\" : \"3279204\" , \"BeginString\" : \"FIX.4.4\" , \"SenderCompID\" : \"demo.icmarkets.3279203\" , \"SenderSubID\" : \"QUOTE\" , \"TargetCompID\" : \"cServer\" , \"TargetSubID\" : \"QUOTE\" , \"HeartBeat\" : \"30\" } You can use it like this: with open ( \"config.json\" ) as configFile : config = json . load ( configFile ) # For client client = Client ( config [ \"Host\" ], config [ \"Port\" ], ssl = config [ \"SSL\" ]) # For request messages logonRequest = LogonRequest ( config )","title":"Config"},{"location":"config/#config","text":"When you create a request message you have to pass a config, this config should be a dictionary like object with these keys: Host: The FIX host that will be used for client connection Port: The port number of host SSL: true/false, this can be used by client if SSL connected is required Username: Your cTrader trading account number Password: Your cTrader trading account password BeginString: Message begin string (FIX.4.4) SenderCompID: Your cTrader FIX SenderCompID SenderSubID: Your cTrader FIX SenderSubID (QUOTE/TRADE) TargetCompID: Your cTrader FIX TargetCompID (cServer), TargetSubID: Your cTrader FIX TargetSubID (QUOTE), HeartBeat: The heartbeat seconds (30) You can get the values for most of them from your cTrader FIX settings. You can use a JSON file to save your configuration, check our samples.","title":"Config"},{"location":"config/#json-sample","text":"{ \"Host\" : \"h51.p.ctrader.com\" , \"Port\" : 5201 , \"SSL\" : false , \"Username\" : \"3279204\" , \"Password\" : \"3279204\" , \"BeginString\" : \"FIX.4.4\" , \"SenderCompID\" : \"demo.icmarkets.3279203\" , \"SenderSubID\" : \"QUOTE\" , \"TargetCompID\" : \"cServer\" , \"TargetSubID\" : \"QUOTE\" , \"HeartBeat\" : \"30\" } You can use it like this: with open ( \"config.json\" ) as configFile : config = json . load ( configFile ) # For client client = Client ( config [ \"Host\" ], config [ \"Port\" ], ssl = config [ \"SSL\" ]) # For request messages logonRequest = LogonRequest ( config )","title":"JSON Sample"},{"location":"receiving-messages/","text":"Response Message \u00b6 Whenever client receives a FIX message it calls the \"MessagedReceived\" callback with the message. The message parameter of callback is not a plain string, it's an instance of ResponseMessage type. ResponseMessage class allows you to easily access each field of a response message. Getting Message Field Values \u00b6 To get a field value you can use the response message GetFieldValue method, it takes the FIX field number and returns the value(s). The GetFieldValue can return three types of values: String: When there is only one field of your provided field number on the message it returns that field value List: If the field is repetitive like symbol IDs or names, then it returns a list, all of those fields values will be inside that list None: if there was no such field inside the message Getting Raw Message \u00b6 If you want to get the raw string of reponse message, you can call the response message getMessage method.","title":"Receiving Messages"},{"location":"receiving-messages/#response-message","text":"Whenever client receives a FIX message it calls the \"MessagedReceived\" callback with the message. The message parameter of callback is not a plain string, it's an instance of ResponseMessage type. ResponseMessage class allows you to easily access each field of a response message.","title":"Response Message"},{"location":"receiving-messages/#getting-message-field-values","text":"To get a field value you can use the response message GetFieldValue method, it takes the FIX field number and returns the value(s). The GetFieldValue can return three types of values: String: When there is only one field of your provided field number on the message it returns that field value List: If the field is repetitive like symbol IDs or names, then it returns a list, all of those fields values will be inside that list None: if there was no such field inside the message","title":"Getting Message Field Values"},{"location":"receiving-messages/#getting-raw-message","text":"If you want to get the raw string of reponse message, you can call the response message getMessage method.","title":"Getting Raw Message"},{"location":"sending-messages/","text":"Messages \u00b6 The package has a class for each of the cTrader FIX API client side messages. You have to use those classes to send request messages. To set fields of a message you should use message instance attributes and use exact field names that are defined on cTrader FIX Engine, Rules of Engagement document. Examples \u00b6 Let's create some messages: # All request messages contructors requires the config to be passed as a parameter logonRequests = LogonRequest ( config ) securityListRequest = SecurityListRequest ( config ) securityListRequest . SecurityReqID = \"A\" securityListRequest . SecurityListRequestType = 0 newOrderSingle = NewOrderSingle ( config ) newOrderSingle . ClOrdID = \"B\" newOrderSingle . Symbol = 1 newOrderSingle . Side = 1 newOrderSingle . OrderQty = 1000 newOrderSingle . OrdType = 1 newOrderSingle . Designation = \"From FIX\" Sending \u00b6 To send a message you must use the client send method: # It returns a Twisted diferred diferred = client . send ( request ) diferred . addCallback ( lambda _ : print ( \" \\n Sent: \" , request . getMessage ( client . getMessageSequenceNumber ()) . replace ( \"\" , \"|\" ))) You can only call the client send method from OnMessageReceived call back or connected callback.","title":"Sending Messages"},{"location":"sending-messages/#messages","text":"The package has a class for each of the cTrader FIX API client side messages. You have to use those classes to send request messages. To set fields of a message you should use message instance attributes and use exact field names that are defined on cTrader FIX Engine, Rules of Engagement document.","title":"Messages"},{"location":"sending-messages/#examples","text":"Let's create some messages: # All request messages contructors requires the config to be passed as a parameter logonRequests = LogonRequest ( config ) securityListRequest = SecurityListRequest ( config ) securityListRequest . SecurityReqID = \"A\" securityListRequest . SecurityListRequestType = 0 newOrderSingle = NewOrderSingle ( config ) newOrderSingle . ClOrdID = \"B\" newOrderSingle . Symbol = 1 newOrderSingle . Side = 1 newOrderSingle . OrderQty = 1000 newOrderSingle . OrdType = 1 newOrderSingle . Designation = \"From FIX\"","title":"Examples"},{"location":"sending-messages/#sending","text":"To send a message you must use the client send method: # It returns a Twisted diferred diferred = client . send ( request ) diferred . addCallback ( lambda _ : print ( \" \\n Sent: \" , request . getMessage ( client . getMessageSequenceNumber ()) . replace ( \"\" , \"|\" ))) You can only call the client send method from OnMessageReceived call back or connected callback.","title":"Sending"}]}